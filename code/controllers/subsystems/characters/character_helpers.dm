
/*
	This ambiguous proc attempts to fetch a character's ID.

	Or, if they have none, it will register them and create one

	The input it takes is a representation of a character, this can be one of a few things:
		/datum/mind: A mind for a character who has been instantiated in the current round and probably controlled a mob. They may or may not have had a client

		/datum/preferences:	A client's savefile containing all their characters in an abstract data state. Typically a player can have ten characters, each a discrete copy of the preference data
			Only one of them, the currently selected selected one, will be extracted and used here


	Both of these datatypes will store the ID if they've previously been assigned one. And if one is assigned we'll just return that

	If none is assigned it means this character has never been registered, we will contact the database to insert them, and then query it again to get the newly autogenerated ID
	That ID will be stored in the data, and also returned
*/
/proc/get_character_id(var/data)
	var/slot = 0
	if(!SSdbcore || !(SSdbcore?.IsConnected()))
		return null

	//Data used for registering, if we need to
	var/name
	var/ckey

	if (istype(data, /datum/preferences))
		var/datum/preferences/P = data
		if (P.character_id)
			return P.character_id
		name = P.real_name
		ckey = P.client_ckey
		slot = P.default_slot
	else if (istype(data, /datum/mind))
		var/datum/mind/M = data
		if (!M.has_crew_persistence())
			//Not allowed, must be a necro/antag/bst
			return null

		if (M.character_id)
			return M.character_id

		//Lets see if there's an id on associated preferences
		var/datum/preferences/P = get_preferences(M.current)
		if (P?.character_id)
			//There is and we don't have it? oops!
			M.character_id = P.character_id
			return M.character_id

		if (P)
			slot = P.default_slot
		else
			//If this mind doesnt already have a character id, we aren't able to create one without attached preferences, abort
			return null

		name = M.name
		ckey = ckey(M.key)
	else
		//Invalid type, no good
		return null


	//If we get here, we have no id, but there might be one in the database
	var/found_id = find_character(ckey, name, slot, data)
	if (found_id)
		return found_id

	//If we get here, the character isn't registered, do so
	return register_character(ckey, name, slot, data)



/*
	This attempts to locate an existing key in the database which is a match for us
*/
/proc/find_character(var/ckey, var/name, var/slot, var/output)

	var/datum/db_query/query = SSdbcore.NewQuery("SELECT * FROM (characters)	WHERE (slot = [slot] AND ckey = '[ckey]');")
	query.Execute()

	if(query.NextRow())
		var/id = query.item[1]
		.=id
		if (output)

			output:character_id = id

			//If this was a mind and not preferences, then we need to save it on prefs immediately
			if (istype(output, /datum/mind))
				var/datum/mind/M = output
				var/datum/preferences/P = get_preferences(M.current)
				if (P)
					P.character_id = id
					P.save_preferences()

	qdel(query)

/*
	This creates a record for a character with this name, use sparingly
	Do other checks to ensure it doesn't already exist first

	Name is the real name of the character
	Output is an optional datum with a character_id var which we'll populate with our result
*/
/proc/register_character(var/ckey, var/name, var/slot, var/output)

	var/datum/db_query/query = SSdbcore.NewQuery("INSERT INTO characters (ckey, character_name, slot) VALUES('[ckey]','[name]',[slot]);")
	query.Execute()

	qdel(query)

	query = SSdbcore.NewQuery("SELECT LAST_INSERT_ID();")
	query.Execute()


	if(query.NextRow())
		if (output)
			var/id = query.item[1]
			.=id
			output:character_id = id
			query = SSdbcore.NewQuery("INSERT INTO credit_records (character_id)\
			VALUES('[id]');")
			query.Execute()


			//If this was a mind and not preferences, then we need to save it on prefs immediately
			if (istype(output, /datum/mind))
				var/datum/mind/M = output
				var/datum/preferences/P = get_preferences(M.current)
				P.character_id = id
				P.save_preferences()

	qdel(query)

/*
	Called when a character loads into the world, to populate their employee checking account

	Returns the number of credits this character should have

	the input is either a preferences or a mind
*/
//TODO: Insert in preferences menu
/proc/get_character_credits(var/character_data)
	var/id = get_character_id(character_data)
	if (!id || !(SSdbcore?.IsConnected()))
		return 0

	//Get the number of credits from the database record associated with our ID
	var/datum/db_query/query = SSdbcore.NewQuery("SELECT (credits) FROM (credit_records)	WHERE (character_id = [id]);")
	query.Execute()

	if(query.NextRow())
		return text2num(query.item[1])

	qdel(query)

	return 0

/*
	Called when a character enters a round, or is revived by an admin to negate a death
	This updates the last seen time for them in the characters table
	and creates an entry for them in the credits_lastround table.
		The latter makes them eligible for end of round fees depending on their status
*/
/proc/character_spawned(var/datum/mind/M)
	//Get their id, registering them in the process if needed
	var/id = get_character_id(M)



	if (!id || !(SSdbcore?.IsConnected()))
		return


	//Now lets update the characters table first
	//Update the last seen var
	var/datum/db_query/query = SSdbcore.NewQuery("UPDATE characters	 SET	last_seen = CURRENT_TIMESTAMP(), character_name = '[M.name]'	 WHERE	 (character_id = [id]);")
	query.Execute()

	qdel(query)

	//Force living status on spawning.
	//This accounts for situations where someone is killed by griefing and admins let them respawn to fix it
	update_lastround_credits(M, STATUS_LIVING)


/*
	Creates or updates an entry in the lastround_credits table, which is used at the end or beginning of the round to handle changes in persistent credits
	A status can optionally be passed in, if not we'll call a proc to get status
*/
/proc/update_lastround_credits(datum/mind/M, status)

	if (!status)
		status = M.get_round_status()

	var/list/credits = M.get_owned_credits()
	if (credits == null)
		return	//No account setup

	var/id = get_character_id(M)

	if (!id || !(SSdbcore.IsConnected()))
		return FALSE

	var/credits_stored = credits["stored"]
	var/credits_carried = credits["carried"]
	var/character_status = status
	//And lets set their status in the lastround table to living
	var/datum/db_query/query = SSdbcore.NewQuery(
	"INSERT INTO credit_lastround	\
		(character_id, credits_stored, credits_carried, character_status)	\
	VALUES	\
		([id], [credits_stored], [credits_carried], [character_status])	\
	ON DUPLICATE KEY UPDATE	\
		credits_stored = [credits_stored],\
		credits_carried = [credits_carried],\
		character_status = [character_status];")
	query.Execute()
	qdel(query)

/*
	Called when a character dies

	any deaths in a designated escape zone are noncanon, so we'll check for that here
	The input is always a mind because someone must first exist in order to die
*/
/proc/character_died(var/datum/mind/M)

	//TODO: Check if they were already dead to prevent duplication
	M.get_final_credits()

	//Spawn off to let the stack finish executing so they get properly marked as dead
	spawn(10)
		update_lastround_credits(M, STATUS_DEAD)




//Takes an ID or a mind. Delivers a string message to a client who is associated with it
/proc/message_character(var/target, var/message)
	if (!target)
		return

	//Lets get the mind first
	var/datum/mind/M = target
	if (isnum(target))
		M = GLOB.characters["[target]"]

	//
	if (!istype(M))
		return

	//We need a client to talk to, no point if there's no human player reading this
	var/client/C
	if (!C)
		//Mind didn't have a client?
		C = M.original?.client || M.current?.client || M.ghost?.client

	if (C)
		to_chat(C, message)



/*
	Is this mind/mob allowed to save stuff in the database? Used to filter out things
*/
/datum/mind/proc/has_crew_persistence()
	if (isnull(cached_crew_persistence))
		cached_crew_persistence = original.has_crew_persistence()

	return cached_crew_persistence

/mob/proc/has_crew_persistence()
	//No necromorphs
	if (is_necromorph())
		return FALSE

	//No special admin characters
	if (isbst(src))
		return FALSE

	//No ERTs
	var/datum/antagonist/A = get_antag_data(mind.special_role)
	if (A)
		if ((A.flags & ANTAG_OVERRIDE_JOB))
			return FALSE

	return TRUE